SELECT DISTINCT
	SH.SHIPMENT_XID																																							SHIPMENT_ID,
	(SELECT SOURCE.CITY
	FROM LOCATION SOURCE
	WHERE SH.SOURCE_LOCATION_GID = SOURCE.LOCATION_GID)																														SH_SOURCE_CITY,
	(SELECT DEST.CITY
	FROM LOCATION DEST
	WHERE SH.DEST_LOCATION_GID = DEST.LOCATION_GID)																															SH_DEST_CITY,
	NVL(rpt_general.f_remove_domain(T_DECLINE.RR_ID),'-')		 																											LANE_ID,
	SH_REF_1.SHIPMENT_REFNUM_VALUE																																			REGION,
	NVL((SELECT R_GEO_REM.REMARK_TEXT
	 FROM
		RATE_GEO_REMARK R_GEO_REM
	 WHERE
		R_GEO_REM.REMARK_QUALIFIER_GID = 'ULE.ULE_SHIPMENTS_PER_YEAR'
		AND T_DECLINE.RR_ID = R_GEO_REM.RATE_GEO_GID),'-')																												SHIPMENTS_PER_YEAR,
	(select loc_ref.LOCATION_REFNUM_VALUE
	from location_refnum loc_ref
	where location_gid = t_decline.TSP_ID
	and loc_ref.LOCATION_REFNUM_QUAL_GID = 'ULE.ULE_RESPONSIBLE_REGION'
	
	)																																																	TSP_REJECTED_REGION,
	
	
	
	
	rpt_general.f_remove_domain(T_DECLINE.TSP_ID)																															TSP_REJECTED,
	(SELECT TSP_LOC.LOCATION_NAME
	FROM LOCATION TSP_LOC
	WHERE TSP_LOC.LOCATION_GID = T_DECLINE.TSP_ID)																															TSP_REJECTED_NAME,
	
	T_DECLINE.TENDER_REJECTED_BY_USER																																		USER_REJECTED,
			
	COALESCE((SELECT
		CASE
			WHEN RGC.CHARGE_AMOUNT IS NULL THEN NULL
			ELSE
				TRIM(TO_CHAR((CASE
					WHEN RGC.CHARGE_CURRENCY_GID <> 'EUR' THEN RGC.CHARGE_AMOUNT *
						(SELECT	COALESCE((SELECT EX_RATES_2_1.EXCHANGE_RATE
						  FROM 	CURRENCY_EXCHANGE_RATE EX_RATES_2_1
						  WHERE	EX_RATES_2_1.TO_CURRENCY_GID = 'EUR'
						  AND ROWNUM = 1
								AND EX_RATES_2_1.EXCHANGE_RATE_GID = 'ULE.ULE_QTY_EXCHANGE'
								AND TO_CHAR(SH.INSERT_DATE, 'Q-YYYY') =  TO_CHAR(EX_RATES_2_1.EFFECTIVE_DATE, 'Q-YYYY')	
								AND RGC.CHARGE_CURRENCY_GID = EX_RATES_2_1.FROM_CURRENCY_GID),
						 (SELECT EX_RATES_2_2.EXCHANGE_RATE
						  FROM	CURRENCY_EXCHANGE_RATE EX_RATES_2_2
						  WHERE	EX_RATES_2_2.TO_CURRENCY_GID = 'EUR'
						  AND ROWNUM = 1
								AND EX_RATES_2_2.EXCHANGE_RATE_GID = 'ULE.ULE_QTY_EXCHANGE'
								AND RGC.CHARGE_CURRENCY_GID = EX_RATES_2_2.FROM_CURRENCY_GID
								AND (EX_RATES_2_2.Effective_Date, EX_RATES_2_2.from_currency_gid) IN (select max(Effective_Date), from_currency_gid from CURRENCY_EXCHANGE_RATE where TO_CURRENCY_GID = 'EUR' AND EXCHANGE_RATE_GID = 'ULE.ULE_QTY_EXCHANGE' group by from_currency_gid))
						) 			EXCHANGE_RATE_TMP
						FROM DUAL)
					
					ELSE RGC.CHARGE_AMOUNT
				END),'999999999D99','NLS_NUMERIC_CHARACTERS = '', '''))
			
		
		END
	FROM
		RATE_GEO_COST RGC
	WHERE
		RGC.RATE_GEO_COST_GROUP_GID = T_DECLINE.RR_ID
		AND ROWNUM = 1),		



		
	(SELECT
		CASE
			WHEN RGCUB.CHARGE_AMOUNT IS NULL THEN NULL
			ELSE
				TRIM(TO_CHAR((CASE
					WHEN RGCUB.CHARGE_AMOUNT_GID <> 'EUR' THEN RGCUB.CHARGE_AMOUNT *
						(SELECT	COALESCE((SELECT EX_RATES_2_1.EXCHANGE_RATE
						  FROM 	CURRENCY_EXCHANGE_RATE EX_RATES_2_1
						  WHERE	EX_RATES_2_1.TO_CURRENCY_GID = 'EUR'
						  AND ROWNUM = 1
								AND EX_RATES_2_1.EXCHANGE_RATE_GID = 'ULE.ULE_QTY_EXCHANGE'
								AND TO_CHAR(SH.INSERT_DATE, 'Q-YYYY') =  TO_CHAR(EX_RATES_2_1.EFFECTIVE_DATE, 'Q-YYYY')	
								AND RGCUB.CHARGE_AMOUNT_GID = EX_RATES_2_1.FROM_CURRENCY_GID),
						 (SELECT EX_RATES_2_2.EXCHANGE_RATE
						  FROM	CURRENCY_EXCHANGE_RATE EX_RATES_2_2
						  WHERE	EX_RATES_2_2.TO_CURRENCY_GID = 'EUR'
						  AND ROWNUM = 1
								AND EX_RATES_2_2.EXCHANGE_RATE_GID = 'ULE.ULE_QTY_EXCHANGE'
								AND RGCUB.CHARGE_AMOUNT_GID = EX_RATES_2_2.FROM_CURRENCY_GID
								AND (EX_RATES_2_2.Effective_Date, EX_RATES_2_2.from_currency_gid) IN (select max(Effective_Date), from_currency_gid from CURRENCY_EXCHANGE_RATE where TO_CURRENCY_GID = 'EUR' AND EXCHANGE_RATE_GID = 'ULE.ULE_QTY_EXCHANGE' group by from_currency_gid))
						) 			EXCHANGE_RATE_TMP
						FROM DUAL)
					
					ELSE RGCUB.CHARGE_AMOUNT
				END),'999999999D99','NLS_NUMERIC_CHARACTERS = '', '''))			
			
		END
	FROM
		RATE_GEO_COST RGC,
		RATE_GEO_COST_UNIT_BREAK RGCUB,
		RATE_UNIT_BREAK RUB
	WHERE
		RGC.RATE_GEO_COST_GROUP_GID = T_DECLINE.RR_ID
		AND ROWNUM = 1
		AND RGC.RATE_GEO_COST_GROUP_GID = RGCUB.RATE_GEO_COST_GROUP_GID
		AND RGCUB.RATE_UNIT_BREAK_GID = RUB.RATE_UNIT_BREAK_GID
		AND RUB.RATE_UNIT_BREAK_MAX = 
			(SELECT FLOOR(TO_NUMBER(TRIM(REPLACE(SH_REF.SHIPMENT_REFNUM_VALUE,',','.'))))
			FROM SHIPMENT_REFNUM SH_REF
			WHERE SH_REF.SHIPMENT_REFNUM_QUAL_GID = 'ULE.ULE_ORIGINAL_PFS' AND SH_REF.SHIPMENT_GID = SH.SHIPMENT_GID
			AND ROWNUM = 1)),'-')																																																																LANE_RATE_EUR,		

			
	CASE
		WHEN SH_COST_BASE.SHIPMENT_COSTS_TMP_1_2 IS NULL THEN TRIM(TO_CHAR(0,'999999999D99','NLS_NUMERIC_CHARACTERS = '', '''))
		ELSE TRIM(TO_CHAR(SH_COST_BASE.SHIPMENT_COSTS_TMP_1_2,'999999999D99','NLS_NUMERIC_CHARACTERS = '', '''))
	END  																																									BASE_RATE_WITH_CORRECTIONS_EUR,	
	
	
	
	NVL(rpt_general.f_remove_domain(SH.SERVPROV_GID),'-')																													FINAL_PERFORMER,	
	TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','YYYY')																			REJECTION_YEAR,
	TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','MM')																			REJECTION_MONTH,
	TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','DD')																			REJECTION_DAY,
	TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','IW')																			REJECTION_WEEK,
	T_DECLINE.TENDER_TYPE																																					SOURCE,
	-- DENSE_RANK() OVER (PARTITION BY TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','YYYY'), 
											-- TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','MM'), 
											-- T_DECLINE.TSP_ID ORDER BY CAST(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET' AS DATE) ASC) 	TSP_REJECTIONS_PER_MONTH,
(SELECT count(SH_T_COLL_BOV2.SHIPMENT_GID)											SH_ID

	FROM
		SHIP_TENDER_COLLAB_BOV SH_T_COLL_BOV2,
		TENDER_COLLABORATION_STATUS T_COLL_STAT2,
		TENDER_COLLABORATION T_COLL2
	WHERE
		SH_T_COLL_BOV2.TENDER_TRANSACTION_NO = T_COLL_STAT2.I_TRANSACTION_NO
		AND T_COLL_STAT2.STATUS_TYPE_GID = 'ULE/PR.TENDER.SECURE RESOURCES'
		AND T_COLL_STAT2.STATUS_VALUE_GID = 'ULE/PR.TENDER.SECURE RESOURCES_DECLINED'
		AND T_COLL2.I_TRANSACTION_NO = SH_T_COLL_BOV2.TENDER_TRANSACTION_NO
		and to_char(trunc(T_COLL_STAT2.UPDATE_DATE),'MM') = to_char(trunc(t_decline.REJECTION_DATE),'MM')
		and SH_T_COLL_BOV2.TENDER_SERVPROV_GID = t_decline.tsp_id		) 			TSP_REJECTIONS_PER_MONTH,
											
											
											
	TRIM(TO_CHAR((T_DECLINE.REJECTION_DATE - T_DECLINE.TENDER_DATE)*24,'999999999D99','NLS_NUMERIC_CHARACTERS = '', ''')) 													RECEIVED_TO_REJECT_HOURS,
	TO_CHAR(From_tz(cast(T_DECLINE.TENDER_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','YYYY-MM-DD HH24:MI:SS')															TSP_RECEIVED_TIME_CET,
	
	TO_CHAR(From_tz(cast((SELECT MIN(ORLS.LATE_PICKUP_DATE)
	FROM ORDER_RELEASE ORLS,
		SHIPMENT_STOP SS,
		SHIPMENT_STOP_D SSD,
		S_SHIP_UNIT SSU,
		S_SHIP_UNIT_LINE SSUL
	WHERE SS.SHIPMENT_GID = SH.SHIPMENT_GID
		AND SSD.SHIPMENT_GID = SS.SHIPMENT_GID
		AND SSD.STOP_NUM = SS.STOP_NUM
		AND SSD.S_SHIP_UNIT_GID = SSU.S_SHIP_UNIT_GID
		AND SSU.S_SHIP_UNIT_GID = SSUL.S_SHIP_UNIT_GID
		AND SSUL.ORDER_RELEASE_GID = ORLS.ORDER_RELEASE_GID) AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','YYYY-MM-DD HH24:MI:SS')												LATEST_PICKUP_CET,	

	TO_CHAR(From_tz(cast((SELECT MAX(ORLS.LATE_DELIVERY_DATE)
	FROM ORDER_RELEASE ORLS,
		SHIPMENT_STOP SS,
		SHIPMENT_STOP_D SSD,
		S_SHIP_UNIT SSU,
		S_SHIP_UNIT_LINE SSUL
	WHERE SS.SHIPMENT_GID = SH.SHIPMENT_GID
		AND SSD.SHIPMENT_GID = SS.SHIPMENT_GID
		AND SSD.STOP_NUM = SS.STOP_NUM
		AND SSD.S_SHIP_UNIT_GID = SSU.S_SHIP_UNIT_GID
		AND SSU.S_SHIP_UNIT_GID = SSUL.S_SHIP_UNIT_GID
		AND SSUL.ORDER_RELEASE_GID = ORLS.ORDER_RELEASE_GID) AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','YYYY-MM-DD HH24:MI:SS')												LATEST_DELIVERY_CET,
		
	NVL((SELECT L_ATTR.LANE_ATTRIBUTE_VALUE
	FROM LANE_ATTRIBUTE L_ATTR,
		RATE_GEO R_GEO
	WHERE L_ATTR.LANE_ATTRIBUTE_DEF_GID = 'ULE.ULE_NOTIFICATION_TIME_H'
		AND L_ATTR.X_LANE_GID = R_GEO.X_LANE_GID
		AND R_GEO.RATE_GEO_GID = T_DECLINE.RR_ID),'-')																														NOTIFICATION_TIME_H,

	NVL((SELECT TO_CHAR(SERVICE_TIME_VALUE/3600)
	FROM SERVICE_TIME SERV_TIME,
		RATE_GEO R_GEO
	WHERE SERV_TIME.X_LANE_GID = R_GEO.X_LANE_GID
		AND R_GEO.RATE_GEO_GID = T_DECLINE.RR_ID),'-')																														TRANSIT_TIME_HH,
	rpt_general.f_remove_domain(SH.INSERT_USER)																																SH_INSERT_USER,
	
	
	(select listagg(cl_MODE.LIMIT,'/') WITHIN GROUP (ORDER BY R_GEO_LANE_MODE.RATE_GEO_GID)
	from
		RATE_GEO R_GEO_LANE_MODE,
		capacity_limit cl_MODE
		
	where 
	R_GEO_LANE_MODE.X_LANE_GID = CL_MODE.X_LANE_GID
	AND R_GEO_LANE_MODE.RATE_GEO_GID = T_DECLINE.RR_ID
	and cl_MODE.TIME_PERIOD_TYPE_GID = 'WEEKLY'
	
	)																																								WEEKLY_CAPACITY,
	(SELECT RG_REM.REMARK_TEXT
	FROM RATE_GEO_REMARK RG_REM
	WHERE 
	RG_REM.RATE_GEO_GID = T_DECLINE.RR_ID
	AND RG_REM.REMARK_QUALIFIER_GID = 'ULE.ULE_DAILY_CAPACITY'
	)																																								DAILY_CAPACITY,
	
	
	
	
	trim(to_char(T_DECLINE.TENDER_DATE - 
	
	(SELECT MIN(ORLS.LATE_PICKUP_DATE)
	FROM ORDER_RELEASE ORLS,
		SHIPMENT_STOP SS,
		SHIPMENT_STOP_D SSD,
		S_SHIP_UNIT SSU,
		S_SHIP_UNIT_LINE SSUL
	WHERE SS.SHIPMENT_GID = SH.SHIPMENT_GID
		AND SSD.SHIPMENT_GID = SS.SHIPMENT_GID
		AND SSD.STOP_NUM = SS.STOP_NUM
		AND SSD.S_SHIP_UNIT_GID = SSU.S_SHIP_UNIT_GID
		AND SSU.S_SHIP_UNIT_GID = SSUL.S_SHIP_UNIT_GID
		AND SSUL.ORDER_RELEASE_GID = ORLS.ORDER_RELEASE_GID),'999999999999D99','NLS_NUMERIC_CHARACTERS = '', ''') )																				Received_vs_late_pick,
		
		
		trim(to_char((SELECT MAX(ORLS.LATE_DELIVERY_DATE)
	FROM ORDER_RELEASE ORLS,
		SHIPMENT_STOP SS,
		SHIPMENT_STOP_D SSD,
		S_SHIP_UNIT SSU,
		S_SHIP_UNIT_LINE SSUL
	WHERE SS.SHIPMENT_GID = SH.SHIPMENT_GID
		AND SSD.SHIPMENT_GID = SS.SHIPMENT_GID
		AND SSD.STOP_NUM = SS.STOP_NUM
		AND SSD.S_SHIP_UNIT_GID = SSU.S_SHIP_UNIT_GID
		AND SSU.S_SHIP_UNIT_GID = SSUL.S_SHIP_UNIT_GID
		AND SSUL.ORDER_RELEASE_GID = ORLS.ORDER_RELEASE_GID)-
		
		(SELECT MIN(ORLS.LATE_PICKUP_DATE)
	FROM ORDER_RELEASE ORLS,
		SHIPMENT_STOP SS,
		SHIPMENT_STOP_D SSD,
		S_SHIP_UNIT SSU,
		S_SHIP_UNIT_LINE SSUL
	WHERE SS.SHIPMENT_GID = SH.SHIPMENT_GID
		AND SSD.SHIPMENT_GID = SS.SHIPMENT_GID
		AND SSD.STOP_NUM = SS.STOP_NUM
		AND SSD.S_SHIP_UNIT_GID = SSU.S_SHIP_UNIT_GID
		AND SSU.S_SHIP_UNIT_GID = SSUL.S_SHIP_UNIT_GID
		AND SSUL.ORDER_RELEASE_GID = ORLS.ORDER_RELEASE_GID) ,'999999999999D99','NLS_NUMERIC_CHARACTERS = '', '''))																										late_del_vs_late_pick,
		
		
		(select count(sh_temp.shipment_gid)
		from shipment sh_temp
		where
		sh_temp.servprov_gid = t_decline.TSP_ID
		and trunc(sh_temp.start_time) = trunc(t_decline.REJECTION_DATE)
		and sh_temp.rate_geo_gid = T_DECLINE.RR_ID
		
		
		) 																																					SH_count_daily,
		(select count(sh_temp.shipment_gid)
		from shipment sh_temp
		where
		sh_temp.servprov_gid = t_decline.TSP_ID
		and to_char(trunc(sh_temp.start_time),'WW') = to_char(trunc(t_decline.REJECTION_DATE),'WW')
		and sh_temp.rate_geo_gid = T_DECLINE.RR_ID
		
		
		) 																																					SH_count_weekly,
		(select count(sh_temp.shipment_gid)
		from shipment sh_temp
		where
		sh_temp.servprov_gid = t_decline.TSP_ID
		and to_char(trunc(sh_temp.start_time),'MM') = to_char(trunc(t_decline.REJECTION_DATE),'MM')
		and sh_temp.rate_geo_gid = T_DECLINE.RR_ID
		
		
		) 																																					SH_count_monthly,
		case when
		((select count(sh_temp.shipment_gid)
		from shipment sh_temp
		where
		sh_temp.servprov_gid = t_decline.TSP_ID
		and trunc(sh_temp.start_time) = trunc(t_decline.REJECTION_DATE)
		
		
		) -
		(SELECT RG_REM.REMARK_TEXT
	FROM RATE_GEO_REMARK RG_REM
	WHERE 
	RG_REM.RATE_GEO_GID = T_DECLINE.RR_ID
	AND RG_REM.REMARK_QUALIFIER_GID = 'ULE.ULE_DAILY_CAPACITY'
	))< 0 then 'PENALTY'
	ELSE 'NON PENALTY' END AS 																																																																																								DAILY_CAP_FLAG,
	
	
	CASE WHEN
	((select count(sh_temp.shipment_gid)
		from shipment sh_temp
		where
		sh_temp.servprov_gid = t_decline.TSP_ID
		and to_char(trunc(sh_temp.start_time),'WW') = to_char(trunc(t_decline.REJECTION_DATE),'WW')
		
		
		) -
		
	(select max(cl_MODE.LIMIT)
	from
		RATE_GEO R_GEO_LANE_MODE,
		capacity_limit cl_MODE
		
	where 
	R_GEO_LANE_MODE.X_LANE_GID = CL_MODE.X_LANE_GID
	AND R_GEO_LANE_MODE.RATE_GEO_GID = T_DECLINE.RR_ID
	and cl_MODE.TIME_PERIOD_TYPE_GID = 'WEEKLY'
	
	))	< 0 then 'PENALTY'
	ELSE 'NON PENALTY' END AS 																																																																																																																									WEEKLY_CAP_FLAG,

				
				
				trim((select TO_CHAR((SUM(CASE
				WHEN (SH_TEMP.CHARGE_CURRENCY_GID = 'EUR' or SH_TEMP.CHARGE_CURRENCY_GID is null) THEN SH_TEMP.CHARGE_AMOUNT
				when SH_TEMP.CHARGE_CURRENCY_GID <> 'EUR' then SH_TEMP.CHARGE_AMOUNT * 
				unilever.ebs_procedures_ule.GET_QUARTERLY_EX_RATE(to_date(SH.END_TIME,'DD.MM.YYYY'),SH_TEMP.CHARGE_CURRENCY_GID,'EUR')
				END)
			),'999999999999D99','NLS_NUMERIC_CHARACTERS = '', ''')
			from rate_geo_cost SH_TEMP
			where  SH_TEMP.RATE_GEO_COST_GROUP_GID = T_DECLINE.RR_ID
			AND SH_TEMP.CHARGE_ACTION = 'W'
			

			))                               																																																											 																																																	ULE_FUEL_WEIGHTED_COST,
			
				
				
			                    

			trim(to_char(((select (SUM(CASE
				WHEN (SH_TEMP.CHARGE_CURRENCY_GID = 'EUR' or SH_TEMP.CHARGE_CURRENCY_GID is null) THEN SH_TEMP.CHARGE_AMOUNT
				when SH_TEMP.CHARGE_CURRENCY_GID <> 'EUR' then SH_TEMP.CHARGE_AMOUNT * 
				unilever.ebs_procedures_ule.GET_QUARTERLY_EX_RATE(to_date(SH.END_TIME,'DD.MM.YYYY'),SH_TEMP.CHARGE_CURRENCY_GID,'EUR')
				else 0 END)
			)
			from rate_geo_cost SH_TEMP
			where  SH_TEMP.RATE_GEO_COST_GROUP_GID = T_DECLINE.RR_ID
			AND SH_TEMP.CHARGE_ACTION IN ('A','W')
			

			)  -
			(select (SUM(CASE
				WHEN (SH_TEMP.COST_GID = 'EUR' or SH_TEMP.COST_GID is null) THEN SH_TEMP.COST
				when SH_TEMP.COST_GID <> 'EUR' then SH_TEMP.COST * 
				unilever.ebs_procedures_ule.GET_QUARTERLY_EX_RATE(to_date(SH.END_TIME,'DD.MM.YYYY'),SH_TEMP.COST_GID,'EUR')
				else 0 END)
			)
			from SHIPMENT_COST SH_TEMP
			where SH_TEMP.SHIPMENT_GID = SH.SHIPMENT_GID
			and SH_TEMP.COST_TYPE = 'B'
			)),'999999999999D99','NLS_NUMERIC_CHARACTERS = '', '''))																																																																																																																				price_rejected_vs_final,
				
			
			
			trim(to_char(
			case 
			
			when 
			(
			(select (SUM(CASE
				WHEN (SH_TEMP.CHARGE_CURRENCY_GID = 'EUR' or SH_TEMP.CHARGE_CURRENCY_GID is null) THEN SH_TEMP.CHARGE_AMOUNT
				when SH_TEMP.CHARGE_CURRENCY_GID <> 'EUR' then SH_TEMP.CHARGE_AMOUNT * 
				unilever.ebs_procedures_ule.GET_QUARTERLY_EX_RATE(to_date(SH.END_TIME,'DD.MM.YYYY'),SH_TEMP.CHARGE_CURRENCY_GID,'EUR')
				END)
			)
			from rate_geo_cost SH_TEMP
			where  SH_TEMP.RATE_GEO_COST_GROUP_GID = T_DECLINE.RR_ID
			AND SH_TEMP.CHARGE_ACTION IN ('A','W')
			

			)  -
			(select (SUM(CASE
				WHEN (SH_TEMP.COST_GID = 'EUR' or SH_TEMP.COST_GID is null) THEN SH_TEMP.COST
				when SH_TEMP.COST_GID <> 'EUR' then SH_TEMP.COST * 
				unilever.ebs_procedures_ule.GET_QUARTERLY_EX_RATE(to_date(SH.END_TIME,'DD.MM.YYYY'),SH_TEMP.COST_GID,'EUR')
				END)
			)
			from SHIPMENT_COST SH_TEMP
			where SH_TEMP.SHIPMENT_GID = SH.SHIPMENT_GID
			and SH_TEMP.COST_TYPE = 'B'
			))< 50 then 0
			when 
			(
			(select (SUM(CASE
				WHEN (SH_TEMP.CHARGE_CURRENCY_GID = 'EUR' or SH_TEMP.CHARGE_CURRENCY_GID is null) THEN SH_TEMP.CHARGE_AMOUNT
				when SH_TEMP.CHARGE_CURRENCY_GID <> 'EUR' then SH_TEMP.CHARGE_AMOUNT * 
				unilever.ebs_procedures_ule.GET_QUARTERLY_EX_RATE(to_date(SH.END_TIME,'DD.MM.YYYY'),SH_TEMP.CHARGE_CURRENCY_GID,'EUR')
				END)
			)
			from rate_geo_cost SH_TEMP
			where  SH_TEMP.RATE_GEO_COST_GROUP_GID = T_DECLINE.RR_ID
			AND SH_TEMP.CHARGE_ACTION IN ('A','W')
			

			)  -
			(select (SUM(CASE
				WHEN (SH_TEMP.COST_GID = 'EUR' or SH_TEMP.COST_GID is null) THEN SH_TEMP.COST
				when SH_TEMP.COST_GID <> 'EUR' then SH_TEMP.COST * 
				unilever.ebs_procedures_ule.GET_QUARTERLY_EX_RATE(to_date(SH.END_TIME,'DD.MM.YYYY'),SH_TEMP.COST_GID,'EUR')
				END)
			)
			from SHIPMENT_COST SH_TEMP
			where SH_TEMP.SHIPMENT_GID = SH.SHIPMENT_GID
			and SH_TEMP.COST_TYPE = 'B'
			))>500 then 500
			else 
			(
			(select (SUM(CASE
				WHEN (SH_TEMP.CHARGE_CURRENCY_GID = 'EUR' or SH_TEMP.CHARGE_CURRENCY_GID is null) THEN SH_TEMP.CHARGE_AMOUNT
				when SH_TEMP.CHARGE_CURRENCY_GID <> 'EUR' then SH_TEMP.CHARGE_AMOUNT * 
				unilever.ebs_procedures_ule.GET_QUARTERLY_EX_RATE(to_date(SH.END_TIME,'DD.MM.YYYY'),SH_TEMP.CHARGE_CURRENCY_GID,'EUR')
				END)
			)
			from rate_geo_cost SH_TEMP
			where  SH_TEMP.RATE_GEO_COST_GROUP_GID = T_DECLINE.RR_ID
			AND SH_TEMP.CHARGE_ACTION IN ('A','W')
			

			)  -
			(select (SUM(CASE
				WHEN (SH_TEMP.COST_GID = 'EUR' or SH_TEMP.COST_GID is null) THEN SH_TEMP.COST
				when SH_TEMP.COST_GID <> 'EUR' then SH_TEMP.COST * 
				unilever.ebs_procedures_ule.GET_QUARTERLY_EX_RATE(to_date(SH.END_TIME,'DD.MM.YYYY'),SH_TEMP.COST_GID,'EUR')
				END)
			)
			from SHIPMENT_COST SH_TEMP
			where SH_TEMP.SHIPMENT_GID = SH.SHIPMENT_GID
			and SH_TEMP.COST_TYPE = 'B'
			))
			end ,'999999999999D99','NLS_NUMERIC_CHARACTERS = '', ''')) as																																				Sum_to_be_charged
			
			
			-- (select count(*)
  -- from ( select level as dnum
           -- from dual
        -- connect by (SH.START_TIME - 
                    -- to_date('01.01.2015', 'dd.mm.yyyy') + 1) - level >= 0) s
-- where to_char(sysdate + dnum, 'DY', 
              -- 'NLS_DATE_LANGUAGE=AMERICAN') not in ('SUN', 'SAT'))																																															weekdays
			

	
FROM
	SHIPMENT SH,
	SHIPMENT_REFNUM SH_REF_1,
	RATE_GEO R_GEO,
(SELECT SH_T_COLL_BOV.SHIPMENT_GID											SH_ID, 
		SH_T_COLL_BOV.TENDER_SERVPROV_GID									TSP_ID, 
		T_COLL.RATE_GEO_GID																RR_ID,
		SH_T_COLL_BOV.TENDER_ACCEPTANCE_CODE								CODE, 
		SH_T_COLL_BOV.TENDER_TRANSACTION_NO									TRANSACTION_ID, 
		T_COLL_STAT.INSERT_USER												TENDER_SENT_BY_USER, 
		T_COLL_STAT.INSERT_DATE												TENDER_DATE, 
		T_COLL_STAT.UPDATE_USER												TENDER_REJECTED_BY_USER, 
		T_COLL_STAT.UPDATE_DATE												REJECTION_DATE,
		T_COLL.TENDER_TYPE													TENDER_TYPE
	FROM
		SHIP_TENDER_COLLAB_BOV SH_T_COLL_BOV,
		TENDER_COLLABORATION_STATUS T_COLL_STAT,
		TENDER_COLLABORATION T_COLL
	WHERE
		SH_T_COLL_BOV.TENDER_TRANSACTION_NO = T_COLL_STAT.I_TRANSACTION_NO
		AND T_COLL_STAT.STATUS_TYPE_GID = 'ULE/PR.TENDER.SECURE RESOURCES'
		AND T_COLL_STAT.STATUS_VALUE_GID = 'ULE/PR.TENDER.SECURE RESOURCES_DECLINED'
		AND T_COLL.I_TRANSACTION_NO = SH_T_COLL_BOV.TENDER_TRANSACTION_NO) 																																						T_DECLINE,
				
	(SELECT
		SUM(CASE
			WHEN SH_COST_TMP_1_2.COST_GID <> 'EUR' THEN SH_COST_TMP_1_2.COST * 
				(SELECT	COALESCE((SELECT EX_RATES_2_1.EXCHANGE_RATE
								  FROM 	CURRENCY_EXCHANGE_RATE EX_RATES_2_1
								  WHERE	EX_RATES_2_1.TO_CURRENCY_GID = 'EUR'
										AND EX_RATES_2_1.EXCHANGE_RATE_GID = 'ULE.ULE_QTY_EXCHANGE'
										AND TO_CHAR(SH_COST_TMP_1_2.INSERT_DATE, 'Q-YYYY') =  TO_CHAR(EX_RATES_2_1.EFFECTIVE_DATE, 'Q-YYYY')	
										AND SH_COST_TMP_1_2.COST_GID = EX_RATES_2_1.FROM_CURRENCY_GID),
								 (SELECT EX_RATES_2_2.EXCHANGE_RATE
								  FROM	CURRENCY_EXCHANGE_RATE EX_RATES_2_2
								  WHERE	EX_RATES_2_2.TO_CURRENCY_GID = 'EUR'
										AND EX_RATES_2_2.EXCHANGE_RATE_GID = 'ULE.ULE_QTY_EXCHANGE'
										AND SH_COST_TMP_1_2.COST_GID = EX_RATES_2_2.FROM_CURRENCY_GID
										AND (EX_RATES_2_2.Effective_Date, EX_RATES_2_2.from_currency_gid) IN (select max(Effective_Date), from_currency_gid from CURRENCY_EXCHANGE_RATE where TO_CURRENCY_GID = 'EUR' AND EXCHANGE_RATE_GID = 'ULE.ULE_QTY_EXCHANGE' group by from_currency_gid))
								) 			EXCHANGE_RATE_TMP
				FROM DUAL)
			ELSE SH_COST_TMP_1_2.COST
		END)								SHIPMENT_COSTS_TMP_1_2,
		SH_COST_TMP_1_2.SHIPMENT_GID		SHIPMENT_ID_TMP_1_2
	FROM
		SHIPMENT_COST SH_COST_TMP_1_2
	WHERE
		1=
		CASE
			WHEN SH_COST_TMP_1_2.COST_TYPE = 'B' THEN 1
			WHEN SH_COST_TMP_1_2.COST_TYPE = 'O' THEN 0	
			WHEN SH_COST_TMP_1_2.ACCESSORIAL_CODE_GID LIKE '%FREIGHT%CORRECTION%' THEN 1
			WHEN SH_COST_TMP_1_2.ACCESSORIAL_CODE_GID LIKE '%FUEL%SURCHARGE%' THEN 0							
			ELSE 0
		END
		AND SH_COST_TMP_1_2.DOMAIN_NAME IN ('ULE/PR','ULE')
	GROUP BY 
		SH_COST_TMP_1_2.SHIPMENT_GID) SH_COST_BASE

		
WHERE
	SH.DOMAIN_NAME IN ('ULE/PR','ULE')
	AND SH.SHIPMENT_GID = SH_COST_BASE.SHIPMENT_ID_TMP_1_2(+)
	AND SH.SHIPMENT_GID = SH_REF_1.SHIPMENT_GID
	AND SH_REF_1.SHIPMENT_REFNUM_QUAL_GID = 'ULE.ULE_FUNCTIONAL_REGION'
	AND SH.RATE_GEO_GID = R_GEO.RATE_GEO_GID(+)
	AND EXISTS
	(SELECT 1
	FROM SHIP_TENDER_COLLAB_BOV T_COLL_BOV,
		TENDER_COLLABORATION_STATUS T_COLL_STAT
	WHERE
		T_COLL_BOV.TENDER_TRANSACTION_NO = T_COLL_STAT.I_TRANSACTION_NO
		AND T_COLL_STAT.STATUS_TYPE_GID = 'ULE/PR.TENDER.SECURE RESOURCES'
		AND T_COLL_STAT.STATUS_VALUE_GID = 'ULE/PR.TENDER.SECURE RESOURCES_DECLINED'
		AND T_COLL_BOV.SHIPMENT_GID = SH.SHIPMENT_GID)
	AND NOT EXISTS
	(SELECT 1
	FROM SHIPMENT_STATUS SHS_STATUS_CANC
	WHERE SH.SHIPMENT_GID = SHS_STATUS_CANC.SHIPMENT_GID 
	AND SHS_STATUS_CANC.STATUS_TYPE_GID = 'ULE/PR.TRANSPORT CANCELLATION'
	AND SHS_STATUS_CANC.STATUS_VALUE_GID = 'ULE/PR.CANCELLED')
	AND EXISTS
	(SELECT 1 
	FROM SHIPMENT_STATUS SHS_FINANCE 
	WHERE SHS_FINANCE.STATUS_TYPE_GID ='ULE/PR.INVOICE_READY' 
	AND SHS_FINANCE.STATUS_VALUE_GID <> 'ULE/PR.INVOICE_NOT_READY' 
	AND SH.SHIPMENT_GID = SHS_FINANCE.SHIPMENT_GID)
	AND	SH.SHIPMENT_GID = T_DECLINE.SH_ID
	AND T_DECLINE.TSP_ID <> 'ULE.SPOT'
	-- AND SH.SHIPMENT_GID = 'ULE/PR.100881335'
	
	
	AND TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','YYYY') = '2015'
	AND TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','MM') = NVL('08',TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','MM'))
	
	-- AND TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','MM') = NVL(:P_MONTH,TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','MM'))
	-- AND TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','Q') = NVL(:P_QUATER,TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','Q'))
	-- AND TO_CHAR(From_tz(cast(T_DECLINE.REJECTION_DATE AS TIMESTAMP), 'GMT') AT TIME ZONE 'CET','YYYY') = :P_YEAR
	-- AND 1 =
	-- (CASE
		-- WHEN (:P_MONTH IS NOT NULL) OR (:P_QUATER IS NOT NULL) THEN 1
		-- ELSE 0
	-- END)